paths:
  /api/sessions/register/:
    post:
      summary: Register new user endpoint
      tags: 
        - Sessions
      responses:
        '201':
          $ref: '#components/responses/201'
        '500':
          $ref: '#components/responses/500'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/NewUser'        
  /api/sessions/login/:
    post:
      summary: Login endpoint
      tags: 
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Login'        
      responses:
        '200a':
          $ref: '#components/responses/200a'
        '500':
          $ref: '#components/responses/500' 
    get:
      summary: Login error endpoint
      tags: 
        - Sessions
      responses:
        '200a':
          $ref: '#components/responses/200a'
        '500':
          $ref: '#components/responses/500'
  /api/sessions/logout/: 
    get:
      summary: Logout endpoint
      tags: 
        - Sessions
      responses:
        '200a':
          $ref: '#components/responses/200a'
        '500':
          $ref: '#components/responses/500'
  /api/sessions/current/:          
    get:
      summary: Current user endpoint
      tags: 
        - Sessions
      responses:
        '200b':
          $ref: '#components/responses/200b'
        '500':
          $ref: '#components/responses/500'
  /api/sessions/login-error/:
    get:
      summary: Login error endpoint
      tags: 
        - Sessions
      responses:
        '500':
          $ref: '#components/responses/500'

components:
  schemas:
    Users:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name 
          example: Roberto
        last_name:
          type: string
          description: User's last name
          example: Benitez
        email:
          type: string
          description: User's email (used as username for login)
          example: robertobenitez@fakeuser.com
        age:
          type:
          description: User's age
          example: 29
        password:
          type: string
          description: User's password for login
          example: fakepassword
      example:
        first_name: Roberto
        last_name: Benitez
        email: robertobenitez@fakeuser.com
        age: 29
        password: fakepassword
    Login:
      type: object
      properties:
        email:
          type: string
          description: User's email (used as username for login)
          example: robertobenitez@fakeuser.com
        password:
          type: string
          description: User's password for login
          example: fakepassword
      example:
        email: robertobenitez@fakeuser.com
        password: fakepassword
  responses:
    "201":
      description: Successful user creation response
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                type: object
                description: Object with user properties
                properties:
                  first_name:
                    type: string
                    description: User's first name 
                    example: Roberto
                  last_name:
                    type: string
                    description: User's last name
                    example: Benitez
                  email:
                    type: string
                    description: User's email (used as username for login)
                    example: robertobenitez@fakeuser.com
                  age:
                    type:
                    description: User's age
                    example: 29
                  password:
                    type: string
                    description: User's password for login
                    example: $2b$10$igppaF04OnP5sdI043chWueH638m3PEQNVcep0tdNCcUG7IFj2unK
                  cart:
                    type: string
                    description: User's cart id
                    example: 6757b2935c5f00d9245d6570
                  role:
                    type: string
                    description: User's role
                    example: user
                  _id:
                    type: string
                    description: User's id generated by mongo
                    example: 6757b2945c5f00d9245d6572
                example:
                  first_name: Roberto
                  last_name: Benitez
                  email: robertobenitez@fakeuser.com
                  age: 29
                  password: $2b$10$igppaF04OnP5sdI043chWueH638m3PEQNVcep0tdNCcUG7IFj2unK
                  cart: 6757b2935c5f00d9245d6570
                  role: user
                  _id: 6757b2945c5f00d9245d6572
              message:
                type: string
                description: Message indicating user creation success
                example: New user created
            example:
              response:
                first_name: Roberto
                last_name: Benitez
                email: robertobenitez@fakeuser.com
                age: 29
                password: $2b$10$igppaF04OnP5sdI043chWueH638m3PEQNVcep0tdNCcUG7IFj2unK
                cart: 6757b2935c5f00d9245d6570
                role: user
                _id: 6757b2945c5f00d9245d6572
              message: New user created
    "200a":
      description: Login or logout success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Message indicating user creation success
                example: Success login
            example:
              message: Success login
    "200b":
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                type: object
                description: Object with user properties
                example: 
                  $ref: '#components/schemas/Users/example'
              message:
                type: string
                description: Message indicating getting product information success
                example: Active session
            example:
              response:
                $ref: '#components/schemas/Users/example'
              message: Active session
    "500":
      description: Server error response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Message of server error
              statusCode:
                type: integer
                description: HTTP status code
            example:
              message: Server Error
              statusCode: 500
  requestBodies:
    userInformation:
      $ref: '#components/schemas/Users'
    login:
      $ref: '#components/schemas/Login'

















